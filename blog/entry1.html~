<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2022-06-05 dom 17:27 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Tiago Oliveira Weber</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="tweber" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="../themes/styles/bigblow/css/htmlize.css"/>
<link rel="stylesheet" type="text/css" href="../themes/styles/bigblow/css/bigblow.css"/>
<link rel="stylesheet" type="text/css" href="../themes/styles/bigblow/css/hideshow.css"/>
<script type="text/javascript" src="../themes/styles/bigblow/js/jquery-1.11.0.min.js"></script>
<script type="text/javascript" src="../themes/styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>
<script type="text/javascript" src="../themes/styles/bigblow/js/jquery.localscroll-min.js"></script>
<script type="text/javascript" src="../themes/styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
<script type="text/javascript" src="../themes/styles/bigblow/js/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../themes/styles/bigblow/js/bigblow.js"></script>
<script type="text/javascript" src="../themes/styles/bigblow/js/hideshow.js"></script>
<script type="text/javascript" src="../themes/styles/lib/js/jquery.stickytableheaders.min.js"></script>
<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-79541283-1', 'auto');
ga('send', 'pageview');
</script>
<meta property="og:title" content="Simulating Circuits with Emacs, Org-mode, Babel and Ngspice"/>
<meta property="og:type" content="article"/>
<meta property="og:image" content="http://tiagoweber.github.io/blog/attachments/entry1_image_700_400.png"/>
<meta property="link" content="http://tiagoweber.github.io/blog/entry1.html"/>
<meta property="pubdate" content="Sat, 26 Jun 2016"/>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">Tiago Oliveira Weber</h1>
<p>
<a href="http://tiagoweber.github.io/index.html#blog">Back home</a>   <a href="http://tiagoweber.github.io/blog.xml" style="float: right;" title="Subscribe to my feed"><img src="../feed-icon.gif" style="border:0"/></a><br>
</p>

<div id="outline-container-org2a893ed" class="outline-2">
<h2 id="org2a893ed">Simulating Circuits with Emacs, Org-mode, Babel and Ngspice</h2>
<div class="outline-text-2" id="text-org2a893ed">
<p>
by Tiago Oliveira Weber <span class="timestamp-wrapper"><span class="timestamp">&lt;26/06/2016-dom&gt;</span></span>
</p>


<p>
Picture this. You are creating a report, studying or preparing a class. While you write your text, you suddenly feel that it is time to show in a circuit how your project works. Now the adventure begins: to add the results of a given simulation to your document, you will have to open your simulation software in another window, describe the circuit using a schematic editor, simulate it and then copy and paste the results to your text file. You might as well copy the image of some waveforms. Additionaly, you will also have to describe the circuit elements in such a way that the reader of your report knows what you have simulated. 
</p>

<p>
In this process a lot can be lost: the quality of your schematic screenshots may or may not be a delight to the eyes, but even if the quality is great, there is still a lot of information that is not accessible through an image of the schematic. These can be the various component properties, simulation parameters and component models. In top of that, if you are like me, you will probably spend a lot of time editing and working with the waveforms to make them fit well in the report. And this is usually made either with an image editor (such as Gimp or Inkscape) or with gnuplot (if you're performing the additional step of exporting the data out of the simulator). After you are done, if anything needs a change, you will have to repeat all this endeavor once again, for every change. In other words, you'll spend more time working with "report matters" than with conceptual matters.
</p>

<p>
Now here comes Emacs, Org-mode and Babel to save you. If you have never worked with Emacs and you like programming, drop all you are doing and give it a great share of attention. Now, I admit it is hard to explain Emacs philosophy without sounding like a preacher. So I will make no such attempt, and will just say it is a customizable (programmable) text editor which may fit your every need according to how you program it. Get a full spoon of Emacs tutorials and go for it. On the other hand, Org-mode, which is an Emacs mode, may have the power to fix your messy life (or improve your already organized one). 
</p>

<p>
But let us get back to our original problem. While using Emacs and Org-mode, you can add snippets of executable code through Babel. Now here comes the magic. According to the official <a href="http://orgmode.org/worg/org-contrib/babel/">Org-mode site</a>, "Babel is Org-mode's ability to execute source code within Org-mode documents". While you add code to your report, you can actually run it and have its results directly added to the report. Doing that, you end up with a live document. It will update (results, graphs, text) according to your modifications in the code. This relates with the concept of <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a> and <a href="https://en.wikipedia.org/wiki/Reproducibility#Reproducible_research">reproducible research</a>.
</p>

<p>
So now you probably already understand what we are going to do. We will treat our circuit as code (a netlist) and pass it to a spice simulator to run. After it runs, we will get its outputs and add them <i>automagically</i> in the report. Here is an example (the source code fontification is due to <a href="http://web.mit.edu/~deberg/emacs/elisp/spice-mode.el">spice-mode</a>):
</p>


<div class="org-src-container">
<pre class="src src-spice"><span style="color: #ffff00; background-color: #000000; font-weight: bold;">*Virtual Ground Test: opamp </span><span style="color: #ffff00; background-color: #000000; font-weight: bold;">gain</span><span style="color: #ffff00; background-color: #000000; font-weight: bold;"> = 1000</span>
<span style="color: #228b22; font-weight: bold;">vin</span> in 0 <span style="color: #6434A3;">dc</span> 0V <span style="color: #6434A3;">sin</span>(0 0.1 100Hz)
<span style="color: #228b22; font-weight: bold;">r1</span> in inn 10<span style="color: #D0372D;">k</span>
<span style="color: #228b22; font-weight: bold;">r2</span> inn out 10<span style="color: #D0372D;">k</span>
<span style="color: #228b22; font-weight: bold;">EOpamp</span> out 0 0 inn 1000
<span style="color: #0000FF;">.</span><span style="color: #ff00ff; font-weight: bold; text-decoration: underline;">t</span><span style="color: #ff00ff; font-weight: bold; text-decoration: underline;">ran</span> 0.1<span style="color: #D0372D;">m</span>s 0.05s
<span style="color: #0000FF;">.</span><span style="color: #0000FF;">p</span><span style="color: #0000FF;">rint</span><span style="color: #6434A3;"> tran</span> v(in)
<span style="color: #0000FF;">.</span><span style="color: #0000FF;">m</span><span style="color: #0000FF;">eas</span><span style="color: #6434A3;"> tran</span> vtest find v(in) <span style="color: #BA36A5;">at</span>=0.04<span style="color: #D0372D;">e</span>-3
<span style="color: #0000FF;">.end</span>
<span style="color: #0000FF;">.control</span>
<span style="color: #228b22; font-weight: bold;">run</span>
<span style="color: #228b22; font-weight: bold;">set</span> <span style="color: #BA36A5;">gnuplot_terminal</span>=png
<span style="color: #228b22; font-weight: bold;">gnuplot</span> <span style="color: #8D8D84; font-style: italic;">$</span><span style="color: #008000;">file v(in) v(out) v(inn)</span>
<span style="color: #ff0000; font-weight: bold;">.endc</span>

</pre>
</div>


<div class="figure">
<p><img src="./amplifier_vcvs_1000.png" alt="amplifier_vcvs_1000.png" />
</p>
</div>
</div>


<div id="outline-container-org8f986cc" class="outline-3">
<h3 id="org8f986cc">Advantages and Disadvantages</h3>
<div class="outline-text-3" id="text-org8f986cc">
</div>
<div id="outline-container-orga124bb4" class="outline-4">
<h4 id="orga124bb4">Advantages</h4>
<div class="outline-text-4" id="text-orga124bb4">
<ul class="org-ul">
<li>You can make changes to your circuit very easily and have them added to the report</li>
<li>You don't need to leave emacs to simulate</li>
<li>As in babel you can work with any language you desire and mix results from different code blocks, you can take results from your circuit and feed them into a matlab code, verilog, VHDL, verilog-a,&#x2026; Also, you can take results from other code block and feed it in your circuits.</li>
<li>As you will be working in Org-mode, you will be able to export your results to any format supported by it, like latex or html. For instance, this webpage (together with the simulation code) was made entirely in Emacs.</li>
</ul>
</div>
</div>

<div id="outline-container-org6b25648" class="outline-4">
<h4 id="org6b25648">Disadvantages</h4>
<div class="outline-text-4" id="text-org6b25648">
<ul class="org-ul">
<li>You will have no schematic image of the circuit (It would be interesting to create an netlist-to-schematic converter in elisp to workaround this)</li>
<li>Working directly with netlists may require more knowledge of the circuit and the simulator than using GUI for schematic edition.</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org6677f0c" class="outline-3">
<h3 id="org6677f0c">Basic Setup</h3>
<div class="outline-text-3" id="text-org6677f0c">
<p>
What you need is basically 
</p>
<ul class="org-ul">
<li><a href="https://www.gnu.org/software/emacs/">Emacs</a> and <a href="http://orgmode.org/">Org-mode</a> (already in Emacs)</li>
<li><a href="http://web.mit.edu/~deberg/emacs/elisp/spice-mode.el">spice-mode</a> (by Carlin J. Vieri) or its <a href="https://github.com/snmishra/emacs-netlist-modes/blob/master/spice-mode/spice-mode.el">newer version</a> (by Van der Plas, Rouat and Vieri)</li>
<li><a href="https://www.emacswiki.org/emacs/Htmlize">htmlize</a> (if you want fontified netlist export to html)</li>
<li><a href="attachments/ob-spice.el">ob-spice</a> (described below) or some variation created by you</li>
<li>a spice simulator capable of running in batch mode (from command line). In my case, I used <a href="http://ngspice.sourceforge.net/">Ngspice</a>.</li>
</ul>
</div>

<div id="outline-container-orgda7a92b" class="outline-4">
<h4 id="orgda7a92b">The ob-spice</h4>
<div class="outline-text-4" id="text-orgda7a92b">
<p>
The community has built a <a href="http://orgmode.org/worg/org-contrib/babel/languages.html">wide range of language support for Babel</a>. However, I could not find spice in this list or anything related to spice simulation. Therefore, I created my own, which is admittedly in a very early stage of development. However, as it already does the job (at least for my needs) I decided to share it <a href="attachments/ob-spice.el">here</a>.
</p>

<p>
You will need to add something like this to your Emacs config to load this file:
</p>
<div class="org-src-container">
<pre class="src src-elisp">(add-to-list 'load-path <span style="color: #008000;">"~/.emacs.d/ob-spice/"</span>)
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">ob-spice</span>)
</pre>
</div>

<p>
When adding the netlist, you should create a header like the following (this is the one I used to create the previous opamp simulation):
</p>
<pre class="example">
#+BEGIN_SRC spice :results drawer :exports both :var file="amplifier_vcvs_1000"
... your netlist here ...
#+END_SRC
</pre>

<p>
In this example, the variable "file" is the name of the png file that will be created by ngspice and included in the report.
</p>
</div>
</div>

<div id="outline-container-org632e4ea" class="outline-4">
<h4 id="org632e4ea">Exporting to PNG</h4>
<div class="outline-text-4" id="text-org632e4ea">
<p>
You need to add the line "set gnuplot_terminal=png" in the control section of your Ngspice code. If you don't, Ngspice will export to eps, which will not be previewed in Org-mode. It is my intention to add this control option as default to ob-spice.
</p>
</div>
</div>

<div id="outline-container-orgfa9540e" class="outline-4">
<h4 id="orgfa9540e">Fontification</h4>
<div class="outline-text-4" id="text-orgfa9540e">
<p>
Using the original <a href="http://web.mit.edu/~deberg/emacs/elisp/spice-mode.el">spice-mode</a> (or its <a href="https://github.com/snmishra/emacs-netlist-modes/blob/master/spice-mode/spice-mode.el">newer version</a>) the fontification for spice circuits is recognized by babel in the buffer. If you use the newer version, it is all fine (I thank Colin for pointing this new version on the comment section). If you use the original spice-mode version together with <a href="https://www.emacswiki.org/emacs/Htmlize">htmlize</a>, however, there is a problem due to the use of the function make-local-hook in spice-mode.el as it is no longer supported in Emacs. 
To solve the problem, I just had to comment all lines that use make-local-hook function. It seems that removing those lines solved the problem without creating additional ones.
</p>
</div>
</div>


<div id="outline-container-org720ba3c" class="outline-4">
<h4 id="org720ba3c">Removing Ngspice plot persistence</h4>
<div class="outline-text-4" id="text-org720ba3c">
<p>
If you, like me, dislike having to close the plot window every time you simulate your circuits, this tweak in Ngspice spice might do the trick.
For it, you will have to download the source code of Ngspice and change 1 line of code.
</p>

<p>
I downloaded ngspice-26.tar.gz and altered "ngspice-26/src/frontend/plotting/gnuplot.c" to disable the persistence of gnuplot.
</p>

<p>
I commented the line 245 and added a slightly changed version: just removed the "-" from the gnuplot options.
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #8D8D84;">// </span><span style="color: #8D8D84; font-style: italic;">(void) sprintf(buf, "xterm -e gnuplot %s - &amp;", filename_plt);   </span>
(<span style="color: #6434A3;">void</span>) <span style="color: #006699;">sprintf</span>(buf, <span style="color: #008000;">"xterm -e gnuplot %s &amp;"</span>, filename_plt);
</pre>
</div>

<p>
After that, you need to run ./configure, make and make install. That's it, no more persistence.
</p>
</div>
</div>
</div>

<div id="outline-container-orgee46938" class="outline-3">
<h3 id="orgee46938">Another example: Measuring and plotting values of a RC circuit</h3>
<div class="outline-text-3" id="text-orgee46938">
<div class="org-src-container">
<pre class="src src-spice"><span style="color: #ffff00; background-color: #000000; font-weight: bold;">*Time Constant Measurement</span>
<span style="color: #228b22; font-weight: bold;">r1</span> 1 0 10<span style="color: #D0372D;">k</span>
<span style="color: #228b22; font-weight: bold;">c1</span> 1 0 1<span style="color: #D0372D;">p</span>

<span style="color: #0000FF;">.IC</span> V(1)=1
<span style="color: #0000FF;">.</span><span style="color: #ff00ff; font-weight: bold; text-decoration: underline;">t</span><span style="color: #ff00ff; font-weight: bold; text-decoration: underline;">ran</span> 1<span style="color: #D0372D;">n</span> 0.1<span style="color: #D0372D;">u</span>
<span style="color: #0000FF;">.</span><span style="color: #0000FF;">p</span><span style="color: #0000FF;">rint</span><span style="color: #6434A3;"> tran</span> v(1)
<span style="color: #0000FF;">.end</span>

<span style="color: #0000FF;">.control</span>
<span style="color: #228b22; font-weight: bold;">run</span>
<span style="color: #228b22; font-weight: bold;">set</span> <span style="color: #BA36A5;">gnuplot_terminal</span>=png
<span style="color: #228b22; font-weight: bold;">gnuplot</span> <span style="color: #8D8D84; font-style: italic;">$</span><span style="color: #008000;">file v(1)</span>
<span style="color: #228b22; font-weight: bold;">meas</span> tran value_at_tau <span style="color: #cd0000;">find</span> V(1) <span style="color: #BA36A5;">at</span>=1<span style="color: #D0372D;">e</span>-8
<span style="color: #228b22; font-weight: bold;">meas</span> tran value_at_five_tau <span style="color: #cd0000;">find</span> V(1) <span style="color: #BA36A5;">at</span>=5<span style="color: #D0372D;">e</span>-8
<span style="color: #228b22; font-weight: bold;">echo</span> <span style="color: #BA36A5;">value_at_tau</span> = <span style="color: #008000;">"$&amp;value_at_tau"</span> &gt; <span style="color: #8D8D84; font-style: italic;">$</span><span style="color: #008000;">file.txt</span>
<span style="color: #228b22; font-weight: bold;">echo</span> <span style="color: #BA36A5;">value_at_five_tau</span> = <span style="color: #008000;">"$&amp;value_at_five_tau"</span> &gt;&gt; <span style="color: #8D8D84; font-style: italic;">$</span><span style="color: #008000;">file.txt</span>
<span style="color: #ff0000; font-weight: bold;">.endc</span>
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">value_at_tau = 0.36798value_at_five_tau = 0.00671732</td>
<td class="org-left"><img src="./timeconstant.png" alt="timeconstant.png" /></td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-orgcd9085c" class="outline-3">
<h3 id="orgcd9085c">Final Words</h3>
<div class="outline-text-3" id="text-orgcd9085c">
<p>
Using Emacs and Org-mode to run codes within a live document is an extremely useful productivity technique. In the case of spice circuits, it might help to create a bridge between simulating circuits, creating reports and interacting with different programming languages.
</p>


<div id="disqus_thread"></div>
<script>
    var disqus_config = function () {
        this.page.url = tiagoweber.github.io;  // Replace PAGE_URL with your page's canonical URL variable

        this.page.identifier = entry1; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };    
    (function() {  // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        s.src = '//tiagoweber.disqus.com/embed.js';        
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
</div>
</div>
</div>
</div>
</body>
</html>
